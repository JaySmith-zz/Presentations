Use nuget to install log4net

-------------------------------------------------
About log4net

My logging layer of choice for .NET is log4net 17from the Apache Software Foundation18.  It's open source, well-documented, extensible, and comes ripe with features right off the vine.  There are alternative logging platforms available if open source isn't an option for you, such as the Microsoft Logging Application Block19 or, if you're willing to fork out some cash, LucidLog.Net20; I can't comment on them directly as I have no experience with either - I've heard good things, but I've also heard that log4net is more feature-rich that both of these.

Note: This series of posts references log4net version 1.2.10.
Getting log4net

log4net is available here21 as a zip archive. 
The archive contains a ton of stuff; for posterity, here are some hilites of what you'll find in there:

    * \bin houses the log4net binaries.  The distribution contains versions of log4net built for specific platforms of .NET, including Microsoft .NET, Mono, Rotor, and the Compact Framework.
    * \doc contains the log4net documentation.  Open index.html to start your perusing. 
    * \examples contains several small, digestible sample logging applications in various languages and platforms.
    * \src holds the log4net source code.
    * \tests contains unit tests for the log4net source code.

A Quick Example

   1. Open Visual Studio and create a new Console application project.
   2. Add to the project a reference to the \bin\net\2.0\release\log4net.dll assembly in the log4net distribution.
   3. Modify your Main() method like so:

 Before running the application, take a close look at the code.  On line 8, the log4net subsystem is configured in the most basic way possible.  Using the BasicConfigurator will cause log4net to output log entries to the console using a default layout (more on layouts in a moment).  log4net configuration is a very broad topic and can get rather deep, but it can be this shallow and narrow too. 

Line 9 requests a logger from the LogManager object.  Logger objects implement the ILog interface, which is what your application will use to instrument itself and percolate log entries.

Lines 11-15 use the logger to log a few statements with various severity levels.  log4net defines 5 such levels:

    * Debug: fine-grained statements concerning program state, typically used for debugging;
    * Info: informational statements concerning program state, representing program events or behavior tracking;
    * Warn: statements that describe potentially harmful events or states in the program;
    * Error: statements that describe non-fatal errors in the application; this level is used quite often for logging handled exceptions;
    * Fatal: statements representing the most severe of error conditions, assumedly resulting in program termination.

Compile and run the application, and you'll see output to the console similar to the following: 
-------

Note that each log statement is accompanied by a bunch of data.  I mentioned that the BasicConfigurator uses a default layout; layouts determine how log4net formats a log statement.  In this case, the BasicConfigurator is using a layout that includes stuff like the identifier of the thread from which the log entry was made, the level of the log entry, etc.
Coming Up

That's it for now - just a quick survey of the logging landscape to get you started.  Next time I'd like to talk more about log4net configuration, specifically how to use the app.config file to make log4net ignore log entries below a certain severity level. 